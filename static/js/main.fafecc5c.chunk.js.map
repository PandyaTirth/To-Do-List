{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","createTodo","id","uuid","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","result","CSSTransition","key","timeout","classNames","onClick","TransitionGroup","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fafecc5c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport uuid from \"uuid/dist/v4\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n    this.setState({ task: \"\" });\r\n  }\r\n  render() {\r\n    return (\r\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n        <label htmlFor='task'>New Todo</label>\r\n        <input\r\n          type='text'\r\n          placeholder='New Todo'\r\n          id='task'\r\n          name='task'\r\n          value={this.state.task}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button className=\"button\">Add Todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n  handleUpdate(evt) {\r\n    evt.preventDefault();\r\n    //take new task data and pass up to parent\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleToggle(evt) {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <CSSTransition key='editing' timeout={500} classNames='form'>\r\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n            <input\r\n              type='text'\r\n              value={this.state.task}\r\n              name='task'\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </CSSTransition>\r\n      );\r\n    } else {\r\n      result = (\r\n        <CSSTransition key='normal' timeout={500} classNames='task-text'>\r\n          <li className='Todo-task' onClick={this.handleToggle}>\r\n            {this.props.task}\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    }\r\n    return (\r\n      <TransitionGroup\r\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\r\n      >\r\n        {result}\r\n        <div className='Todo-buttons'>\r\n          <button onClick={this.toggleForm}>\r\n            <i className='fas fa-pen' />\r\n          </button>\r\n          <button onClick={this.handleRemove}>\r\n            <i className='fas fa-trash' />\r\n          </button>\r\n        </div>\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: []\r\n    };\r\n    this.create = this.create.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n  create(newTodo) {\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n  }\r\n  remove(id) {\r\n    this.setState({\r\n      todos: this.state.todos.filter(t => t.id !== id)\r\n    });\r\n  }\r\n  update(id, updatedTask) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  toggleCompletion(id) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  render() {\r\n    const todos = this.state.todos.map(todo => {\r\n      return (\r\n        <CSSTransition key={todo.id} timeout={500} classNames='todo'>\r\n          <Todo\r\n            key={todo.id}\r\n            id={todo.id}\r\n            task={todo.task}\r\n            completed={todo.completed}\r\n            removeTodo={this.remove}\r\n            updateTodo={this.update}\r\n            toggleTodo={this.toggleCompletion}\r\n          />\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <div className='TodoList'>\r\n        <h1>\r\n          To-Do-List! <span>An Animated Todo List Made With React Hooks.</span>\r\n        </h1>\r\n        <NewTodoForm createTodo={this.create} />\r\n\r\n        <ul>\r\n          <TransitionGroup className='todo-list'>{todos}</TransitionGroup>\r\n        </ul>\r\n        <footer>\r\n          &copy; Copyrights @HooliganGames 2020\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}